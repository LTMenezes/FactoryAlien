{"name":"Factoryalien","tagline":"A .NET fake data generator inspired by ruby's factory_girl gem.","body":"FactoryAlien - A fake data generator for .Net.\r\n===\r\n\r\nTravis: [![Travis](https://travis-ci.org/pedrohfernandes/FactoryAlien.svg?branch=develop)](https://travis-ci.org/pedrohfernandes/FactoryAlien)  \r\n\r\nNuget: [![NuGet](https://img.shields.io/nuget/dt/FactoryAlien.svg)](https://www.nuget.org/packages/FactoryAlien/)  \r\n\r\n## Project Description ##\r\nGenerate fake data to improve yout unit tests.\r\nFactoryAlien is a package inspired by factory_girl gem to help you to creating fake data to your tests.\r\n\r\n## Overview ##\r\nFactoryalien is designed to make test-driven development more productive and unit tests more refactoring-safe.\r\n\r\n## Getting Started ##\r\nInstall FactoryAlien with NuGet Package Manager:\r\n> Install-Package FactoryAlien\r\n\r\nTo start creating fake data to your tests, you just need to create a factory object with generic type to will be generated.\r\n```csharp\r\nIFactory<User> userFactory = FactoryAlien.Define<User>();\r\n```\r\n\r\n### 1. Create a single object.\r\nTo create a single fake object, use CreateOne() method.\r\n```csharp\r\nUser user = userFactory.CreateOne();\r\n```\r\n\r\nSo you can specify your custom values! Do following:\r\n```csharp\r\nUser user = userFactory.CreateOne(user => {\r\n    user.FirstName = \"Gabriel\";\r\n});\r\n```\r\nThis code will create a new User instance with \"Gabriel\" value in FirstName property, \r\nand random values in others properties.\r\n\r\n### 2. Create an object list.\r\nTo create a fake object list, use CreateList(size) method.\r\n```csharp\r\nvar userList = userFactory.CreateList(3);\r\n```\r\nThis code will create a list with 3 fake objects.\r\n\r\nYou can specify your custom values when creating lists too! Do following:\r\n```csharp\r\nvar userList = userFactory.CreateList(3, user => {\r\n    user.FirstName = \"Gabriel\";\r\n});\r\n```\r\nThis code will create a list with 3 fake User instances with \"Gabriel\" value in FirstName property, \r\nand random values in others properties.\r\n\r\n### 3. Building complex lists.\r\nYou can use fluent interface to create a more complex list with random and customized values, see:\r\n```csharp\r\nvar factory = FactoryAlien.Define<Product>();\r\nvar fakeProducts = factory.CreateList(5, product => product.Category = \"GAMES\");\r\nfakeProducts.Add(4)\r\n             .Add(3, product => product.Value = 25.00)\r\n             .Add(2, product => {\r\n\t\t\t\t product.Status = \"In Stock\";\r\n\t\t\t\t product.Category = \"Computer\";\r\n\t\t\t  });\r\n```\r\nThis code above will create a list with 14 products:  \r\n5 products with category equals to \"Games\";  \r\n4 products with all properties filled with random values;  \r\n3 products with value equals to 25.00;  \r\n2 products with Status equals to \"In Stock\" and Category equals to \"Computer\";  \r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}